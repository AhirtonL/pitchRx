}
test <- getSnapshots(pitches)
Q
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[2]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
test <- getSnapshots(pitches)
n
n
n
n
n
test <- getSnapshots(pitches)
n
n
n
n
dim(snapshots[, 1:3, ])
dim(velocties)
apply(snapshots[, 7:9, ], c(1, 2), function(x) { length(x) })
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
Q
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
test <- getSnapshots(pitches)
n
n
n
n
n
dim(locations)
dim(test)
install.packages("abind")
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
test <- getSnapshots(pitches)
n
n
n
n
n
n
n
n
dim(test)
?data.frame
?as.data.frame
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshot[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
n
n
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshots[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
#' Produce time sequenced
#'
#' Pitch trajectories animated on a two-dimensional plot.
#'
#' Details to go here.
#'
#' @param data The nine PITCHf/x parameters used to determine the location of a pitch at a given time.
#' @param interval the amount of time between 'snapshots'
#' @return Return a three dimensinal array. The third dimension corresponds to different 'snapshots' of locations.
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
dim(snapshot)
dim(snapshots)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
Q
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
install.packages(c("bit", "bitops", "boot", "Cairo", "chron", "cluster", "colorspace", "digest", "ff", "forecast", "foreign", "gsubfn", "gWidgets", "httr", "igraph", "Matrix", "mgcv", "nlme", "parser", "Rcpp", "RcppArmadillo", "RCurl", "rgl", "RJSONIO", "rpart", "sets", "tseries", "websockets", "yaml", "zoo"))
library(Rcpp)
library(rggobi)
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
setwd("~/Desktop/github/local/pitchRx/inst/shiny")
library(shiny)
runApp()
n
n
layer
layers
str(layer)
str(layers)
layer[[1]]
layer[[2]]
eval(layer[[1]])
str(layer[[1]])
str(eval(layer[[1]]))
Q
runApp()
n
n
n
n
n
n
n
n
n
n
n
n
runApp()
Q
runApp()
runApp()
layer
n
layers
n
layers
layer
eval(layer[1])
eval(layer[[1])
eval(layer[[1]])
eval(layer[[2]])
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print(p+layers[[1]]+layers[[2]])
str(layer)
print(p+layers[[1]])
print(p+layers[[1]]+eval(layers[[2]]))
str(layers[[2]])
str(layers)
print(p+layers)
print(p+layers[[1]])
print(p+layers[[1]]%+replace%layers[[2]])
print(p+layers[[1]]+layers[[2]])
layers
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
strikeFX(pitches, geom="tile", layer=list(coord_equal(), facet_grid(.~pitch_type)))
n
layer
str(layer)
n
layers
layer==layers
str(layers)
identical(layer, layer)
identical(layer, layers)
layers
str(layers)
str(layer)
list("a", "b")
l <- list("a", "b")
l2 <- list("c", "d")
list(l, l2)
layers
list(layer[[1]], layer[[2]])
identical(layer, list(layer[[1]], layer[[2]]))
identical(layer, list(eval(layer[[1]]), eval(layer[[2]])))
list(eval(layer[[1]]), eval(layer[[2]]))
str(list(eval(layer[[1]]), eval(layer[[2]])))
Q
runApp()
setwd("~/Desktop/github/local/pitchRx/inst/shiny")
runApp()
?install.packages
runApp()
setwd("~/Desktop/github/local/pitchRx")
install(".")
strikeFX(pitches, geom="tile", contour=TRUE, layer=facet_grid(pitch_types~stand))
install(".")
strikeFX(pitches, geom="tile", contour=TRUE, layer=facet_grid(pitch_types~stand))
layer
layers
str(layer)
Q
install(".")
?substitute
?env
?environment
?eval
install(".")
strikeFX(pitches, geom="tile", layer=facet_grid(.~pitch_type))
install(".")
strikeFX(pitches, geom="tile", layer=facet_grid(.~pitch_type))
strikeFX(pitches, geom="tile", layer=list(coord_equal(), facet_grid(.~pitch_type)))
document(".")
runApp()
setwd("~/Desktop/github/local/pitchRx/inst/shiny")
runApp()
runApp()
runApp()
