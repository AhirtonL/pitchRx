n
n
head(data3)
n
n
n
n
n
getData <- function(pitchers, factors, numeric) { #Enter any number of pitchers and variables for model fitting
require(RMySQL)
if (is.null(drv)) drv <- dbDriver("MySQL")
if (is.null(MLB)) MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
criteria <- paste(rep("atbats.pitcher_name", length(pitchers)), paste("'", pitchers, "'", sep=""),sep = " = ")
crit <- paste(criteria, collapse = " OR ")
variables <- paste(c(factors,numeric), collapse = ", ")
data <- dbGetQuery(MLB, paste("SELECT ", variables, " FROM pitches INNER JOIN atbats ON
(atbats.num = pitches.num AND atbats.url = pitches.url)
WHERE ", crit, sep=""))
data2 <- na.omit(data)
data3 <- subset(data, pitch_type != "IN" & pitch_type != "PO")
if ("atbats.url" %in% c(factors, numeric)) { #Extract date from url
u <- strsplit(data3$url, "_")
year <- gsub("month", "", sapply(u, function(x) x[2]))
month <- gsub("day", "", sapply(u, function(x) x[3]))
day <- gsub("/gid", "", sapply(u, function(x) x[4]))
data3$date <- paste(year, month, day, sep="")
}
if ("count" %in% factors){ #Seperate counts into balls and strikes
counts <- strsplit(data3$count, "-")
data3$balls <- as.factor(sapply(counts, function(x) x[1]))
data3$strikes <- as.factor(sapply(counts, function(x) x[2]))
}
browser()
#Coerce variable types
for (i in factors)
data3[,i] <- as.factor(data3[,i])
if (length(numeric > 0)){
for (j in numeric)
data3[,j] <- as.numeric(data3[,j])
}
return(data3)
}
ver <- getData(pitchers = "Justin Verlander",
factors = c("atbats.url", "pitcher_name", "pitch_type", "count", "stand"),
numeric=NULL)
factors
u
head(strsplit(data3$url, "/"))
getData <- function(pitchers, factors, numeric, includeGames=TRUE) { #Enter any number of pitchers and variables for model fitting
require(RMySQL)
if (is.null(drv)) drv <- dbDriver("MySQL")
if (is.null(MLB)) MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
criteria <- paste(rep("atbats.pitcher_name", length(pitchers)), paste("'", pitchers, "'", sep=""),sep = " = ")
crit <- paste(criteria, collapse = " OR ")
if (includeGames){
variables <- paste(c("atbats.url", factors, numeric), collapse = ", ")
} else variables <- paste(c(factors, numeric), collapse = ", ")
#Query MySQL
data <- dbGetQuery(MLB, paste("SELECT ", variables, " FROM pitches INNER JOIN atbats ON
(atbats.num = pitches.num AND atbats.url = pitches.url)
WHERE ", crit, sep=""))
data2 <- na.omit(data)
data3 <- subset(data, pitch_type != "IN" & pitch_type != "PO")
if (includeGames) { #Extract gameID and date from url
data3$gid <- sapply(strsplit(data3$url, "/"), function(x) x[10])
u <- strsplit(data3$gid, "_")
year <- gsub("month", "", sapply(u, function(x) x[2]))
month <- gsub("day", "", sapply(u, function(x) x[3]))
day <- gsub("/gid", "", sapply(u, function(x) x[4]))
data3$date <- paste(year, month, day, sep="/")
}
if ("count" %in% factors){ #Seperate counts into balls and strikes
counts <- strsplit(data3$count, "-")
data3$balls <- as.factor(sapply(counts, function(x) x[1]))
data3$strikes <- as.factor(sapply(counts, function(x) x[2]))
}
#Coerce variable types
for (i in factors)
data3[,i] <- as.factor(data3[,i])
if (length(numeric > 0)){
for (j in numeric)
data3[,j] <- as.numeric(data3[,j])
}
return(data3)
}
Q
getData <- function(pitchers, factors, numeric, includeGames=TRUE) { #Enter any number of pitchers and variables for model fitting
require(RMySQL)
if (is.null(drv)) drv <- dbDriver("MySQL")
if (is.null(MLB)) MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
criteria <- paste(rep("atbats.pitcher_name", length(pitchers)), paste("'", pitchers, "'", sep=""),sep = " = ")
crit <- paste(criteria, collapse = " OR ")
if (includeGames){
variables <- paste(c("atbats.url", factors, numeric), collapse = ", ")
} else variables <- paste(c(factors, numeric), collapse = ", ")
#Query MySQL
data <- dbGetQuery(MLB, paste("SELECT ", variables, " FROM pitches INNER JOIN atbats ON
(atbats.num = pitches.num AND atbats.url = pitches.url)
WHERE ", crit, sep=""))
data2 <- na.omit(data)
data3 <- subset(data, pitch_type != "IN" & pitch_type != "PO")
if (includeGames) { #Extract gameID and date from url
data3$gid <- sapply(strsplit(data3$url, "/"), function(x) x[10])
u <- strsplit(data3$gid, "_")
year <- gsub("month", "", sapply(u, function(x) x[2]))
month <- gsub("day", "", sapply(u, function(x) x[3]))
day <- gsub("/gid", "", sapply(u, function(x) x[4]))
data3$date <- paste(year, month, day, sep="/")
}
if ("count" %in% factors){ #Seperate counts into balls and strikes
counts <- strsplit(data3$count, "-")
data3$balls <- as.factor(sapply(counts, function(x) x[1]))
data3$strikes <- as.factor(sapply(counts, function(x) x[2]))
}
#Coerce variable types
for (i in factors)
data3[,i] <- as.factor(data3[,i])
if (length(numeric > 0)){
for (j in numeric)
data3[,j] <- as.numeric(data3[,j])
}
return(data3)
}
ver <- getData(pitchers = "Justin Verlander",
factors = c("pitcher_name", "pitch_type", "count", "stand"),
numeric=NULL)
head(ver)
getData <- function(pitchers, factors, numeric, includeGames=TRUE) { #Enter any number of pitchers and variables for model fitting
require(RMySQL)
if (is.null(drv)) drv <- dbDriver("MySQL")
if (is.null(MLB)) MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
criteria <- paste(rep("atbats.pitcher_name", length(pitchers)), paste("'", pitchers, "'", sep=""),sep = " = ")
crit <- paste(criteria, collapse = " OR ")
if (includeGames){
variables <- paste(c("atbats.url", factors, numeric), collapse = ", ")
} else variables <- paste(c(factors, numeric), collapse = ", ")
#Query MySQL
data <- dbGetQuery(MLB, paste("SELECT ", variables, " FROM pitches INNER JOIN atbats ON
(atbats.num = pitches.num AND atbats.url = pitches.url)
WHERE ", crit, sep=""))
data2 <- na.omit(data)
data3 <- subset(data, pitch_type != "IN" & pitch_type != "PO")
if (includeGames) { #Extract gameID and date from url
data3$gid <- sapply(strsplit(data3$url, "/"), function(x) x[10])
u <- strsplit(data3$gid, "_")
year <- gsub("month", "", sapply(u, function(x) x[2]))
month <- gsub("day", "", sapply(u, function(x) x[3]))
day <- gsub("/gid", "", sapply(u, function(x) x[4]))
data3$date <- paste(year, month, day, sep="/")
data4 <- data3[, c(factors, "gid", "date")]
}
if ("count" %in% factors){ #Seperate counts into balls and strikes
counts <- strsplit(data4$count, "-")
data4$balls <- as.factor(sapply(counts, function(x) x[1]))
data4$strikes <- as.factor(sapply(counts, function(x) x[2]))
}
#Coerce variable types
for (i in factors)
data4[,i] <- as.factor(data4[,i])
if (length(numeric > 0)){
for (j in numeric)
data4[,j] <- as.numeric(data4[,j])
}
return(data4)
}
ver <- getData(pitchers = "Justin Verlander",
factors = c("pitcher_name", "pitch_type", "count", "stand"),
numeric=NULL)
head(ver)
library(devtools)
install_github('pitchRx', 'cpsievert')
?scrapeFX
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
str(data)
unique(data$pitch$url)
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
n
n
n
n
n
new.urls
Q
document(".")
install(".")
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
n
n
n
n
n
dim(new.urls)
Q
install(".")
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
str(data)
install(".")
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
data <- scrapeFX(start="2012-07-21", end="2012-07-23", tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
dim(data)
str(data)
install(".")
data <- scrapeFX(start="2012-07-21", end=Sys.Date(), tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
install(".")
data <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
Sys.Date()
"2012-10-29" > as.POSIXct(Sys.Date())
as.POSIXct(Sys.Date())
install(".")
data <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
install(".")
install(".")
n
data <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
n
n
start
n
n
n
n
n
n
n
n
n
n
n
last.date
n
end
n
ls()
n
n
n
subset(urls, date >= start & date <= end)
date
unique(urls$date)
start
as.POSIXct(urls$date)
?is.POSIXct
dim(urls)
dim(urls[-3,])
head(urls)
head(urls[-3,])
install(".")
data <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = list(atbat = fields$atbat, pitch = fields$pitch, runner=NULL, player = NULL, coach = NULL, umpire = NULL))
dbWriteTable(MLB, value = data$pitch, name = "pitches", row.names = FALSE, append = TRUE)
drv <- dbDriver("MySQL")
MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
dbWriteTable(MLB, value = data$pitch, name = "pitches", row.names = FALSE, append = TRUE)
?closeConnections
?closeAllConnections
getConnections()
getConnection()
showConnections()
showConnections(all=TRUE)
dbListConnections(MySQL())
dbDisconnect()
dbDisconnect(MLB)
dbDisconnect(dbListConnections(MySQL())[[16]])
dbListConnections(MySQL())
MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
dbWriteTable(MLB, value = data$pitch, name = "pitches", row.names = FALSE, append = TRUE)
dbWriteTable(MLB, value = data$atbat, name = "atbats", row.names = FALSE, append = TRUE)
dbWriteTable(MLB, value = data$runner, name = "runners", row.names = FALSE, append = TRUE)
dbWriteTable(MLB, value = data$player, name = "players", row.names = FALSE, append = TRUE)
dbWriteTable(MLB, value = data$coach, name = "coaches", row.names = FALSE, append = TRUE)
dbWriteTable(MLB, value = data$umpire, name = "umpires", row.names = FALSE, append = TRUE)
str(data)
players <- data$player
umpires <- data$umpire
names(data)
rm(data)
dbWriteTable(MLB, value = players, name = "players", row.names = FALSE, append = TRUE)
names(players)
head(players)
players$url <- gsub("players.xml", "inning/inning_all.xml", players$url_player)
head(players)
dbWriteTable(MLB, value = players, name = "players", row.names = FALSE, append = TRUE)
max(urls$date)
urls2 <- dbGetQuery(MLB, "SELECT date, url, url_player, first_name, last_name, type FROM games")
urls$url_scoreboard <- gsub("gid_[0-9]+_[0-9]+_[0-9]+_[a-z]+_[a-z]+_[0-9]/[a-z]+/[0-9]+.xml", "miniscoreboard.xml", urls[, "url_player"])
head(urls)
urls <- dbGetQuery(MLB, "SELECT date, url, url_player FROM games")
fields
data2 <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = fields$game)
data2 <- scrapeFX(start="2012-07-21", end="2012-10-29", tables = list(game = fields$game))
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
n
n
n
new.players
new.urls
length(new.urls)
Q
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
n
n
new.urls
Q
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
n
game.branches
n
n
n
n
n
n
n
n
n
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
n
n
n
n
n
n
n
n
dim(urls)
-grep("NA", date)
Q
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-25", tables = list(game = fields$game))
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
j
ordered.tables
tables
Q
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
install(".")
data2 <- scrapeFX(start="2012-07-21", end="2012-07-22", tables = list(game = fields$game))
names(players)
names(new.players)
Q
?read.file
?read
setwd("~/Desktop/github/local/pitchRx/data")
players_old <- read.table("players.rda")
names(players_old)
head(players_old)
players_old <- read.table("players.rda", header=T)
head(players_old)
players_old <- load("players.rda")
head(players_old)
?load
str(players_old)
players_old <- load("players.Rda")
players_old <- load("~/Desktop/github/local/pitchRx/data/players.Rda")
players_old <- load("~/Desktop/github/local/pitchRx/data/players.RData")
players_old <- load("~/Desktop/github/local/pitchRx/data/players.rda")
players_old <- load("~/Desktop/github/local/pitchRx/data/fields.rda")
players_old <- load(file = "~/Desktop/github/local/pitchRx/data/fields.rda")
players_old <- load(file = "~/Desktop/github/local/pitchRx/data/players.rda")
