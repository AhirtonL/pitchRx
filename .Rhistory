+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
dim(snapshot)
dim(snapshots)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
Q
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
install.packages(c("bit", "bitops", "boot", "Cairo", "chron", "cluster", "colorspace", "digest", "ff", "forecast", "foreign", "gsubfn", "gWidgets", "httr", "igraph", "Matrix", "mgcv", "nlme", "parser", "Rcpp", "RcppArmadillo", "RCurl", "rgl", "RJSONIO", "rpart", "sets", "tseries", "websockets", "yaml", "zoo"))
library(Rcpp)
library(rggobi)
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
setwd("~/Desktop")
allPitches <- read.csv("allPitches.csv")
allBalls <- subset(allPitches,
des == "Ball")
allBalls$top_inning <- gsub("Top Inning: ", "", allBalls$top_inning)
strikeFX(allBalls[1000:2000,], geom = "bin",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
library(pitchRx)
strikeFX(allBalls[1000:2000,], geom = "bin",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls, geom = "bin",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls, geom = "tile",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
install(".")
setwd("~/Desktop/github/local/pitchRx")
library(devtools)
install(".") #install the package
strikeFX(allBalls, geom = "tile",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls[1000:5000,], geom = "tile",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls, geom = "hex",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls[1000:5000,], geom = "hex",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
strikeFX(allBalls, geom = "tile",
density1=list(top_inning="Y"),
density2=list(top_inning="N"),
layer=facet_grid(.~stand))
library(xtable)
?xtable
?coord_fixed()
?require
library(pitchRx)
data(pitches)
library(devtools)
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
animateFX(pitches)
n
facets
Q
animateFX(pitches, point.size=5, layer=facet_grid(.~stand, labeller = label_both))
n
facets
Q
animateFX(pitches, point.size=5, layer=list(facet_grid(pitcher_name~stand, labeller = label_both), theme_bw()))
n
facets
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
Rivera <- subset(pitches, pitcher_name=="Mariano Rivera")
strikeFX(Rivera, layer=facet_grid(.~stand))
table(Rivera$pitch_type)
table(Rivera$pitch_type, Rivera$stand)
strikeFX(pitches, layer=facet_grid(.~stand, labeller=label_both))
strikeFX(Rivera, layer=facet_grid(.~stand, labeller=label_both))
animateFX(pitches, point.size=5, layer=list(facet_grid(pitcher_name~stand, labeller = label_both), theme_bw()))
n
n
Q
animateFX(Rivera, layer=facet_grid(.~stand))
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
install(".")
animateFX(Rivera, layer=facet_grid(.~stand))
animateFX(Rivera, layer=facet_grid(.~stand, labeller=label_both))
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both))
animateFX(Rivera, layer=facet_grid(.~stand, labeller=label_both))
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both))
n
dim(complete)
table(complete$pitch_type)
table(complete$pitch_type, complete$stand, complete$pitcher_name)
n
n
table(reordered$pitch_type, reordered$stand, reordered$pitcher_name)
Q
strikeFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both))
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both)) #doesn't
?reorder
str(pitches)
with(InsectSprays, reorder(spray, count, median))
head(InsectSprays)
InsectSprays
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both)) #doesn't
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand)) #doesn't
animateFX(Rivera, layer=facet_grid(.~stand)) #doesn't
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both)) #doesn't
install(".")
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller=label_both)) #doesn't
animateFX(pitches, point.size=5, layer=facet_grid(pitcher_name~stand, labeller=label_both)) #doesn't
?xtable
setwd("~/Dropbox/ISU/Classes/544/M4/HW6")
design <- read.csv("design.csv")
melt(design)
melt(design, id.vars="Block")
matrix(m.design$value, ncol=1)
m.design <- melt(design, id.vars="Block")
matrix(m.design$value, ncol=1)
y <- matrix(m.design$value, ncol=1)
y
?matrix
y <- matrix(m.design$value, ncol=1, dimnames="y")
names(y) <- "y"
y
m.design
m.design$variable=="A"
blocks <- NULL
for (i in 1:5)
blocks[,i] <- m.design$Block == i
m.design$Block
blocks <- matrix(m.design$Block)
for (i in 1:5)
blocks[,i] <- m.design$Block == i
blocks <- matrix(m.design$Block, ncol=1)
for (i in 1:5)
blocks[,i] <- m.design$Block == i
X <- cbind(m.design$variable=="A", m.design$variable=="B", m.design$variable=="C", m.design$variable=="D", m.design$Block==1, m.design$Block==2, m.design$Block==3, m.design$Block==4, m.design$Block==5)
str(m.design)
m.design$Block <- factor(m.design$Block)
model.matrix(lm(y~.,m.design))
?model.matrix
m.design <- melt(design, id.vars="Block")
y <- data.frame(y_obs=m.design$value)
m.design$Block <- factor(m.design$Block)
X <- cbind(m.design$variable=="A", m.design$variable=="B", m.design$variable=="C", m.design$variable=="D", m.design$Block==1, m.design$Block==2, m.design$Block==3, m.design$Block==4, m.design$Block==5)
for (i in 1:dim(X)[2])
X[,i] <- as.numeric(X[,i])
?round
?int
for (i in 1:dim(X)[2])
X[,i] <- integer(X[,i])
X[,i] <- as.integer(X[,i])
m.design <- melt(design, id.vars="Block")
m.design$Block <- factor(m.design$Block)
I <- cbind(m.design$variable=="A", m.design$variable=="B", m.design$variable=="C", m.design$variable=="D")
y <- rep(m.design$value, 4)
y*I
m.design <- melt(design, id.vars="Block")
m.design$Block <- factor(m.design$Block)
I <- cbind(m.design$variable=="A", m.design$variable=="B", m.design$variable=="C", m.design$variable=="D")
y <- rep(m.design$value, 4)*I
y
y==0
y==0 <- NA
y[y==0] <- NA
y
X
m.design <- melt(design, id.vars="Block")
m.design$Block <- factor(m.design$Block)
I <- cbind(m.design$variable=="A", m.design$variable=="B", m.design$variable=="C", m.design$variable=="D")
y <- rep(m.design$value, 4)*I
y[y==0] <- "NA"
#print(xtable(y), include.rownames=FALSE)
for (i in 1:dim(I)[2])
I[,i] <- as.integer(I[,i])
#print(xtable(I), include.rownames=FALSE)
X <- cbind(m.design$Block==1, m.design$Block==2, m.design$Block==3, m.design$Block==4, m.design$Block==5)
for (i in 1:dim(X)[2])
X[,i] <- as.integer(X[,i])
X
ginv(t(X)%*%X)%*%X
ginv(t(X)%*%X)%*%t(X)%*%y
ginv(t(X)%*%X)%*%t(X)
ginv(t(X)%*%X)%*%t(X)%*%m.design$value
one <- rep(1, 20)
ginv(t(one)%*%one)%*%t(one)%*%m.design$value
mean(ginv(t(X)%*%X)%*%t(X)%*%m.design$value)
mean(m.design$value)
ginv(t(one)%*%one)%*%t(one)
ginv(t(one)%*%one)
ginv(t(X)%*%X)
ginv(t(X)%*%X)%*%t(X)
diag(1, nrow=5, ncol=5)%*%ginv(t(X)%*%X)%*%t(X)
rep(1, 20)%*%ginv(t(X)%*%X)%*%t(X)
rep(1, 5)%*%ginv(t(X)%*%X)%*%t(X)
diag(1, nrow=5, ncol=5)%*%ginv(t(X)%*%X)%*%t(diag(1, nrow=5, ncol=5))
rep(1, 5)%*%ginv(t(X)%*%X)%*%t(rep(1, 5))
t(rep(1, 5))
t(rep(1, 5))%*%ginv(t(X)%*%X)%*%rep(1, 5)
t(rep(1, 5))%*%ginv(t(X)%*%X)%*%rep(1, 5)*(1/5)
t(rep(1/5, 5))%*%ginv(t(X)%*%X)%*%rep(1/5, 5)
setwd("~/Downloads")
corn <- read.csv("iowa_corn.csv")
head(corn)
dim(corn)
corn$corn <- log(corn$corn)
library(GGally)
ggpairs(corn)
corn <- read.csv("iowa_corn.csv")
corn$corn <- sqrt(corn$corn)
ggpairs(corn)
corn$corn <- (corn$corn)^(1/3)
ggpairs(corn)
corn$corn <- (corn$corn)^(1/4)
ggpairs(corn)
rf <- lm(rainfall~year,corn)
summary(rf)
plot(residuals(rf))
plot(corn$year, corn$rainfall)
abline(rf)
hist(corn$rainfall)
hist(corn$rainfall, breaks=2)
hist(corn$rainfall, breaks=10)
hist(corn$rainfall, breaks=20)
predict(rf, year=2013)
?predict
plot(corn$rainfall, residuals(rf))
head(corn)
tail(corn)
str(corn)
predict(rf, year=2013)
predict(rf, data.frame(year=2013))
m <- lm(corn~rainfall+year, corn)
pred <- <- predict(m, data.frame(year=2013, rainfall=rf2013))
pred <- predict(m, data.frame(year=2013, rainfall=rf2013))
rf2013 <- predict(rf, data.frame(year=2013))
m <- lm(corn~rainfall+year, corn)
pred <- predict(m, data.frame(year=2013, rainfall=rf2013))
pred
pred <- predict(m, data.frame(year=2013, rainfall=rf2013), se.fit=TRUE)
pred
install.packages(LearnBayes)
install.packages("LearnBayes"")
install.packages("LearnBayes")
install.packages("LearnBayes")
library(LearnBayes)
?blinreg()
post <- blinreg(corn$corn, model.matrix(m), m=1000)
str(post)
betas <- matrix(post$beta, ncol=3)
head(betas)
hist(betas[,1])
hist(betas[,2])
hist(betas[,3])
setwd("~/Downloads")
corn <- read.csv("iowa_corn.csv")
corn$corn_trans <- log(corn$corn)
library(GGally)
ggpairs(corn)
rf <- lm(rainfall~year, corn)
rf2013 <- predict(rf, data.frame(year=2013))
m <- lm(corn_trans~rainfall+year, corn)
pred <- predict(m, data.frame(year=2013, rainfall=rf2013), se.fit=TRUE)
#install.packages("LearnBayes")
library(LearnBayes)
post <- blinreg(corn$corn_trans, model.matrix(m), m=1000)
betas <- matrix(post$beta, ncol=3)
hist(betas[,1])
hist(betas[,2])
hist(betas[,3])
sigmas <- matrix(post$sigma, ncol=1)
?predict
rf <- lm(rainfall~year, corn)
rf2013 <- predict(rf, data.frame(year=2013), se.fit=TRUE)
rf2013
rf2013 <- predict(rf, data.frame(year=2013), se.fit=TRUE, interval="prediction")
rf2013
rf2013 <- predict(rf, data.frame(year=2013), se.fit=TRUE)
rf2013
sim13rf <- rnorm(1000, rf2013$fit, rf2013$se.fit*sqrt(rf2013$df+1))
hist(sim13rf)
str(post)
post <- blinreg(corn$corn_trans, model.matrix(m), m=1000)
betas <- matrix(post$beta, ncol=3)
sigmas <- matrix(post$sigma, ncol=1)
mus <- betas[,1]+betas[,2]*sim13rf+betas[,3]*2013
pred.post <- rnorm(1000, mus, sigmas)
hist(pred.post)
hist(exp(pred.post))
quantile(exp(pred.post), c(0.025, .975))
quantile(exp(pred.post), c(0.025, .5, .975))
betas[,2]
mean(exp(pred.post))
quantile(exp(pred.post), c(0.025, .5, .975))
setwd("~/Dropbox/ISU/Teaching/Admin")
class <- read.csv("all_numbers.csv")
class$full <- as.character(class$full)
sampleGroup <- function(data) {
n <- max(data$group_number)
group <- sample(n, size=1, replace=FALSE)
records <- subset(data, group_number==group)
return(list(group_number=group, names=records$full))
}
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
install_github('devtools')
??devtools
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
data <- scrapeFX(start="2013-04-01", end=Sys.Date())
n
n
last.date
end
urls <- subset(urls, date >= start & date <= end)
n
n
n
n
n
n
n
n
Q
