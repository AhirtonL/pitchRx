summary(happy)
happy.df <- ddply(happy,.(degree), summarize,
happy=sum(happy=="very happy"),
not = sum(happy=="not too happy"))
happy.df
na.omit(happy.df)
happy.df$degree <- factor(happy$degree, levels=levels(happy$degree)[c(5,3,4,1,2,6)])
happy.df$degree <- factor(happy.df$degree, levels=levels(happy.df$degree)[c(5,3,4,1,2,6)])
happy.df
str(happy.df)
levels(happy.df$degree)[c(5,3,4,1,2,6)]
happy.df <- ddply(happy,.(degree), summarize,
happy=sum(happy=="very happy"),
not = sum(happy=="not too happy"))
happy.df
happy.df$degree <- factor(happy.df$degree, levels=levels(happy.df$degree)[c(5,3,4,1,2,6)])
happy.df
levels(happy.df$degree)[c(5,3,4,1,2,6)]
levels(happy.df$degree)
happy.df$degree <- factor(happy.df$degree, levels=levels(happy.df$degree))
happy.df
happy.df[c(5,3,4,1,2,6),]
happy.df <- happy.df[c(5,3,4,1,2,6),]
happy.df <- na.omit(happy.df)
happy.df
happy.df$degree <- factor(happy.df$degree, labels = c(1,2,3,4,5))
happy.df
glm.data$degree <- as.numeric(as.character(glm.data$degree))
happy.df$degree <- as.numeric(as.character(happy.df$degree))
str(happy.df)
happy.df$degree <- factor(happy.df$degree, labels = c(1,2,4,6,7))
happy.df$degree <- as.numeric(as.character(happy.df$degree))
happy.df
str(happy.df)
kobe$day <- 1:dim(kobe)[1]
qplot(x = day, y = prop, data = kobe, geom = "point")
kobe
kobe$day <- dim(kobe)[1]:1
kobe
qplot(x = day, y = prop, data = kobe, geom = "point")
qplot(x = Date, y = X3PA, data = kobe, geom = "point")
qplot(x = day, y = X3PA, data = kobe, geom = "point")
kobe.model <- glm(cbind(X3PM, X3PA - X3PM)~day, family=binomial(), data=kobe)
kobe.model <- glm(cbind(X3PM, X3PA)~day, family=binomial(), data=kobe)
str(made)
str(kobe)
kobe$X3PM <- as.numeric(made)
kobe$prop <- kobe$X3PM/kobe$X3PA
kobe$misses <- kobe$X3PA - kobe$X3M
kobe$misses <- kobe$X3PA - kobe$X3PM
kobe
kobe.model <- glm(cbind(X3PM, misses)~day, family=binomial(), data=kobe)
as.data.frame(predict(kobe.model, newdata=data.frame(degree = 1:dim(kobe)[1]), type = "response", se.fit=T))[-3]
as.data.frame(predict(kobe.model, newdata=data.frame(day = 1:dim(kobe)[1]), type = "response", se.fit=T))[-3]
fits <- as.data.frame(predict(kobe.model, newdata=data.frame(day = dim(kobe)[1]:1), type = "response", se.fit=T))[-3]
fits$day <- dim(kobe)[1]:1
limits <- aes(ymax = fit + se.fit, ymin=fit - se.fit)
qplot(x = day, y = X3PA, data = kobe, geom = "point") + geom_errorbar(limits, size = .1)
qplot(x, fit, data=fits, size=I(1)) + ylim(c(0,1)) + geom_point(aes(x, two_fit), size=1, colour="blue") + geom_point(aes(x, three_fit), size=1, colour="red") + geom_errorbar(limits, size = .1) + geom_errorbar(limits2, size = .1, colour="blue") + geom_errorbar(limits3, size = .1, colour="red")
qplot(x, fit, data=fits, size=I(1)) + ylim(c(0,1)) + geom_errorbar(limits, size = .1)
qplot(x = day, fit, data=fits, size=I(1)) + ylim(c(0,1)) + geom_errorbar(limits, size = .1)
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1)
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe)
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + opts(legend = "none")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + opts(guide = "none")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black")
@
kobe
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + scale_color(guide = "none")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + scale_discrete_color(guide = "none")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + scale_discrete_colour(guide = "none")
qplot(x = day, fit, data=fits, size=I(1), color = "red") + ylim(c(0,1)) + geom_errorbar(limits, size = .1) + geom_point(aes(x = day, y = prop), data = kobe, color = "black") + scale_colour(guide = "none")
phihat=deviance(o)/df.residual(o)
phihat=deviance(kobe.model)/df.residual(kobe.model)
phihat
qplot(x = day, y = X3PA, data = kobe, geom = "point")
?glm
kobe.poisson <- glm(cbind(X3PM, misses)~day, family=poisson(), data=kobe)
kobe.poisson <- glm(X3PA~day, family=poisson(), data=kobe)
qplot(x = day, y = X3PA, data = kobe, geom = "point")
anova(kobe.poisson)
install.packages("ggplot2")
library(ggplot2)
install_github('ggplot2', 'hadley')
install_github('ggplot2', 'hadley')
install_github('gtable', 'hadley')
library(gtable)
install_github('ggplot2', 'hadley')
library(ggplot2)
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
animateFX(pitches)
Q
animateFX(pitches)
Q
install(".")
install(".")
animateFX(pitches)
help("Deprecated")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
install(".")
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
?sizes
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
install(".")
install(".")
animateFX(pitches)
install(".")
animateFX(pitches)
document(".")
install(".")
animateFX(pitches)
n
point.color
n
n
n
n
n
n
install(".")
animateFX(pitches)
n
n
n
n
n
n
n
install(".")
animateFX(pitches)
n
n
install(".")
animateFX(pitches)
n
n
n
n
n
n
n
Q
install(".")
animateFX(pitches)
n
n
n
n
n
n
n
install(".")
animateFX(pitches)
n
n
n
n
n
n
n
install(".")
animateFX(pitches)
n
n
n
n
n
n
n
Q
install(".")
strikeFX(pitches)
install(".")
strikeFX(pitches)
n
n
n
n
n
n
n
n
n
install(".")
strikeFX(pitches)
n
n
n
n
n
n
n
n
n
n
install(".")
strikeFX(pitches)
n
n
n
n
n
n
install(".")
strikeFX(pitches)
install(".")
strikeFX(pitches)
install(".")
strikeFX(pitches)
n
n
n
n
n
n
n
n
n
n
strikeFX(pitches)
n
n
n
n
n
p
Q
install(".")
strikeFX(pitches)
n
n
n
n
n
p
boundaries
Q
install(".")
strikeFX(pitches)
n
n
n
n
n
n
n
n
n
n
strikeFX(pitches, point.size = 100000)
n
n
n
n
n
n
n
n
n
n
install(".")
animateFX(pitches, point.color = aes(color = type))
animateFX(pitches, layer = facet_grid(. ~ pitcher_name))
animateFX(pitches, layer = facet_grid(type ~ stand)) #favorite so far
strikeFX(pitches, layer = facet_grid(type ~ stand)) #favorite so far
install(".")
animateFX(pitches, layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
animateFX(pitches, layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
facet
facets3
facets
facets2
facets3
layers
as.character(as.list(match.call(animateFX(pitchFX2, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws)))))$layer)
as.character(as.list(match.call(animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws)))))$layer)
match.call(animateFX(pitchFX2, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws))))
match.call(animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws))))
as.list(match.call(animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws))))
)
Q
animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws)))
n
n
layers
n
n
n
n
facets3
match.call()
layers <- as.character(as.list(match.call())$layer)
facet <- layers[grep("facet", layers)]
facets <- gsub("[)]", "", gsub("facet_[a-z]+[(]","", facet))
facets2 <- llply(str_split(as.character(facets), "~"), str_trim)
facets3 <- unlist(llply(facets2, function(x) { x[!x %in% "."] }))
class(as.list(match.call())$layer)
method(as.list(match.call())$layer)
match.call()
Q
install(".")
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
layers
as.list(match.call())
as.list(match.call())$po
as.list(match.call())$x
color <- as.list(match.call())$point.color
gsub("[)]", "", gsub("aes[(]color = ","", color))
gsub("[)]", "", gsub("aes(color = ","", color))
gsub("[)]", "", gsub("aes[(]+color = ","", color))
gsub("[)]", "", gsub("[aes(]color = ","", color))
gsub("[)]", "", gsub("*[aes(]color = ","", color))
gsub("[)]", "", gsub("aes[(]color = ","", color))
Q
install(".")
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
n
n
head(complete)
facets3
layer
length(layer)
str(layer)
layers
as.list(match.call())$layer
str(as.list(match.call())$layer)
length(as.list(match.call())$layer)
Q
animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws)))
n
as.list(match.call())$layer
str(as.list(match.call())$layer)
length(as.list(match.call())$layer)
Q
install(".")
animateFX(pitches, layer = list(scale_colour_discrete("pitches"), facet_grid(stand~p_throws)))
n
n
n
n
n
n
n
n
n
n
n
n
n
n
facets3
colors
Q
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
Q
install(".")
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
layer
length(layer)
length(layers)
Q
install(".")
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
n
n
n
n
n
n
n
n
n
n
n
n
n
n
facets3
colors
Q
install(".")
animateFX(pitches, point.color = aes(color = type), layer = facet_grid(type ~ stand)) #favorite so far
mean(c(2,2,2,3,3,4,5))
install_github('pitchRx', 'cpsievert')
animateFX(pitches)
install(".")
animateFX(pitches)
animateFX(pitches, layer = facet_grid(pitcher_name~stand))
