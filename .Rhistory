head(frame[,1:2])
#If two quantiles exist, section has to be "inside" or "outside"
#If one quantile, section has to be "lower" or "upper"
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, label.quantiles=TRUE, label.prob = TRUE, xlab = "T") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line()
if (label.quantiles) {
value1 <- paste(quant, q.min, sep = "=")
value2 <- paste(quant, q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
section2 <- subset(data, x < q.min)
section <- rbind(section1, section2)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea()
plotArea("lower")
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, label.quantiles=TRUE, label.prob = TRUE, dist = "T") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line()
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
section2 <- subset(data, x < q.min)
section <- rbind(section1, section2)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea()
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, label.quantiles=TRUE, label.prob = TRUE, dist = "T") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
section2 <- subset(data, x < q.min)
section <- rbind(section1, section2)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea()
plotArea("lower")
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, label.quantiles=TRUE, label.prob = TRUE, dist = "X") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
section2 <- subset(data, x < q.min)
section <- rbind(section1, section2)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea()
plotArea("lower")
plotArea("inside", q1=-1.5, q2=2.5)
plotArea("outside", q1=-1.5, q2=2.5) #not working
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, label.quantiles=TRUE, label.prob = TRUE, dist = "X") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea("outside", q1=-1.5, q2=2.5) #not working
plotArea("inside", q1=-1.5, q2=2.5)
plotArea("outside", q1=-1.5, q2=2.5) #not working
plotArea("lower")
plotArea()
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean, sd))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
?dnorm
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean=mean, sd=sd))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(-5, 5, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean=mean, sd=sd))
browser()
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
summary(data)
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(mean-5*sd, mean+5*sd, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean=mean, sd=sd))
browser()
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
Q
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(mean-5*sd, mean+5*sd, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean=mean, sd=sd))
browser()
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
Q
plotArea <- function(section = "upper", q1 = -1.5, q2=NULL, mean=0, sd=1, label.quantiles=TRUE, dist = "X") {
require(ggplot2)
x <- seq(mean-5*sd, mean+5*sd, by  = 0.01)
data <- data.frame(x = x, density = dnorm(x, mean=mean, sd=sd))
q.upper <- NULL
q.lower <- NULL
q.min <- min(q1, q2)
q.max <- max(q1, q2)
p <- ggplot(data, aes(x, y=density)) + geom_line() + xlab(dist)
if (label.quantiles) {
value1 <- paste(tolower(dist), q.min, sep = "=")
value2 <- paste(tolower(dist), q.max, sep = "=")
if (!is.null(q.min)) p <- p+annotate("text", label = value1, x = q.min+.5, y = -0.02, size = 7, colour = "red")
if (!is.null(q.max)) p <- p+annotate("text", label = value2, x = q.max+.5, y = -0.02, size = 7, colour = "red")
}
if (q.min == q.max) {
if (section == "upper") {
section <- subset(data, x > q.min)
} else {
section <- subset(data, x < q.min)
}
} else { #two quantiles
if (section == "outside"){
section1 <- subset(data, x > q.max)
p <- p + geom_ribbon(data=section1, aes(ymin=0, ymax=density, fill="blue", alpha=.4))
section <- subset(data, x < q.min)
} else {
section <- subset(data, x < q2 & x > q1)
}
}
p + geom_ribbon(data=section, aes(ymin=0, ymax=density, fill="blue", alpha=.4))+theme(legend.position = "none")
}
plotArea(mean=21, sd=0.75)
plotArea(q1=24, mean=21, sd=0.75)
plotArea(q1=20.3, q2=21.4, mean=21, sd=0.75, dist="X")
plotArea(q1=20.3, q2=22.4, mean=21, sd=0.75, dist="X")
plotArea(q1=-2, q2=2)
install.packages("rjags")
library(rjags)
setwd("~/Desktop/github/local/cpsievert.github.com/slides/stat226")
library(slidify)
author("chap_13_outline")
?integrate
integrate(dnorm(mean=1),-1,3)
integrate(dnorm(x=-5:5/100,mean=1),-1,3)
?dnorm
setwd("~/Dropbox/ISU/Teaching/Admin")
class <- read.csv("all_numbers.csv")
class$full <- as.character(class$full)
sampleGroup <- function(data) {
n <- max(data$group_number)
group <- sample(n, size=1, replace=FALSE)
records <- subset(data, group_number==group)
return(list(group_number=group, names=records$full))
}
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
21
sampleGroup(class)
sampleGroup(class)
setwd("~/Desktop/github/local/pitchRx")
document(".")
install(".") #install the package
require(pitchRx)
data(urls)
dir <- gsub("players.xml", "batters/",
urls$url_player[1000])
doc <- htmlParse(dir)
nodes <- getNodeSet(doc, "//a")
values <- gsub(" ", "",
sapply(nodes, xmlValue))
ids <- values[grep("[0-9]+", values)]
filenames <- paste(dir, ids, sep="")
stats <- urlsToDataFrame(filenames,
tables=list(Player=NULL),
add.children=TRUE)
data(pitches)
animateFX(pitches)
animateFX(pitches, layer=facet_grid(pitcher_name~stand, labeller = label_both))
?join
strikeFX(pitches, geom = "tile", contour = TRUE)
traceback()
install_github('pitchRx', 'cpsievert')
library(pitchRx)
strikeFX(pitches, geom = "tile", contour = TRUE)
pitches$p_throws <- paste("Pitcher Throws:", pitches$p_throws)
strikeFX(pitches, geom = "tile", contour = TRUE)
install(".")
strikeFX(pitches, geom = "tile", contour = TRUE)
install(".")
rm(pitches)
data(pitches)
strikeFX(pitches, geom = "tile", contour = TRUE)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print(t)
Q
strikeFX(pitches, geom = "tile", contour = TRUE)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print(t)
str(FX1)
names(FX1)
Q
strikeFX(pitches, geom = "tile", contour = TRUE)
if ("p_throws" %in% names(FX)) FX$p_throws <- paste("Pitcher Throws:", FX$p_throws) #Add suffixes for context
if ("stand" %in% names(FX)) FX$stand <- paste("Batter Stands:", FX$stand)
str(FX)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
