getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
test <- getSnapshots(pitches)
n
n
n
n
n
n
n
n
dim(test)
?data.frame
?as.data.frame
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshot[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
n
n
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshots[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
#' Produce time sequenced
#'
#' Pitch trajectories animated on a two-dimensional plot.
#'
#' Details to go here.
#'
#' @param data The nine PITCHf/x parameters used to determine the location of a pitch at a given time.
#' @param interval the amount of time between 'snapshots'
#' @return Return a three dimensinal array. The third dimension corresponds to different 'snapshots' of locations.
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
dim(snapshot)
dim(snapshots)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
Q
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
install.packages(c("bit", "bitops", "boot", "Cairo", "chron", "cluster", "colorspace", "digest", "ff", "forecast", "foreign", "gsubfn", "gWidgets", "httr", "igraph", "Matrix", "mgcv", "nlme", "parser", "Rcpp", "RcppArmadillo", "RCurl", "rgl", "RJSONIO", "rpart", "sets", "tseries", "websockets", "yaml", "zoo"))
library(Rcpp)
library(shiny)
setwd("~/Desktop/pitchRxApp")
runApp()
n
n
c(x="x", y="y")
runApp()
n
n
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install_github('pitchRx', 'cpsievert')
strikeFX(pitches, geom="hex")
setwd("~/Desktop/github/local/pitchRx")
document(".")
install(".") #install the package
strikeFX(pitches, geom="hex")
strikeFX(pitches, geom="bin")
install(".")
strikeFX(pitches, geom="hex")
strikeFX(pitches, geom="bin")
install(".")
strikeFX(pitches, geom="contour")
install(".")
strikeFX(pitches, geom="contour")
setwd("~/Desktop/pitchRxApp")
runApp()
runApp()
runApp()
?any
setwd("~/Desktop/github/local/pitchRx")
document(".")
install(".") #install the package
strikeFX(pitches, geom=c("point", "hex"))
strikeFX(pitches, geom=c("hex", "point"))
strikeFX(pitches, geom=c("bin", "point"))
strikeFX(pitches, geom=c("bin", "hex"))
install(".") #install the package
strikeFX(pitches, geom="hex", layer=list(xlim(-1,1)))
strikeFX(pitches, geom="hex", layer=list(xlim(-1,1), ylim(-2,2)))
strikeFX(pitches, geom="hex", layer=list(xlim(-1,1), ylim(0,2)))
setwd("~/Desktop/pitchRxApp")
runApp()
runApp()
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
head(data)
geom
g
n
n
n
n
Q
runApp()
runApp()
runApp()
runApp()
n
xlayer
print(strikeFX(data, geom = g, point.size = input$point_size,
point.alpha = input$point_alpha))
Q
runApp()
strikeFX(pitches)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
runApp()
runApp()
runApp()
runApp()
runApp()
n
input
Q
runApp()
input$variable
str(input)
input.geom_bin
input$geom_bin
input$unique
input$choose_variable
input$cho
input$variable
Q
runApp()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
as.language(binwidth=c(3,4))
language(binwidth=c(3,4))
quote(binwidth=c(3,4))
?quote
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
?as.name
as.name("des")
?strikeFX
runApp()
runApp()
list("x"="x")
runApp()
runApp()
runApp()
?list
runApp()
n
n
input$geom_point
str(input)
Q
runApp()
Q
runApp()
runApp()
list("x"== "x")
list("x","y")
test <-list()
test
test[[1]] <- c("a", "b")
test
names(test) <- "p"
test
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
strikeFX(pitches, geom="tile", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
runApp()
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=list(xlim(-3,3), ylim(0,7)))
?kde2d
?limits
install(".") #install the package
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
traceback()
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
names(pitches)
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
document(".")
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
install(".")
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(pitcher_name~stand))
runApp()
setwd("~/Desktop/pitchRxApp")
runApp()
runApp()
?strikeFx
?strikeFX
runApp()
strikeFX(pitches, geom="hex", density1=list(des="Called Strike"), layer=facet_grid(.~stand))
runApp()
runApp()
?invisible
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?par
?ani.options
runApp()
runApp()
runApp()
runApp()
runApp()
install(".")
setwd("~/Desktop/github/local/pitchRx")
install(".") #install the package
strikeFX(pitches, geom="contour")
