m~dunif(0,1)
v~dunif(0,1e4)
}
"
dat <- list(x = y, n = n, N=length(y))
m <- jags.model(textConnection(bike_model), dat)
res <- coda.samples(m, c("theta", "alpha", "beta"), 1e3)
check <- data.frame(alpha=as.numeric(res[[1]][,"alpha"]),
beta=as.numeric(res[[1]][,"beta"]),
theta=as.numeric(res[[1]][,"theta"]))
str(res)
?expression
library(grDevices)
?expression
?ggplot2::expression
theta <- res[[1]][,-c(1,2)]
str(theta)
theta.hat = colMeans(theta)
str(theta.hat)
thetas <- res[[1]][,-c(1,2)]
attr(thetas, "dimnames")
thetas.df <- data.frame(thetas)
head(thetas.df)
y/n
thetas.df <- melt(data.frame(thetas))
head(thetas.df)
thetas <- res[[1]][,-c(1,2)]
thetas.df <- melt(data.frame(thetas))
thetas.df$raw <- rep(y/n, each=1000)
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density() + facet_wrap(.~variable)
ggplot(data=thetas.df, aes(y=value)) + geom_histogram(aes(y = ..density..)) + geom_density() + facet_wrap(.~variable)
ggplot(data=thetas.df, aes(y=value)) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(data=thetas.df) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(data=thetas.df, x=value) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(.~variable)
head(thetas.df)
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(~variable)
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(~variable)+geom_vline(xintercept=raw)
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(~variable)+geom_vline(aes(xintercept=raw))
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(~variable)+geom_vline(aes(xintercept=raw, colour="red"))
ggplot(data=thetas.df, aes(x=value)) + geom_histogram(aes(y = ..density..)) + geom_density()+facet_wrap(~variable, ncol=5)+geom_vline(aes(xintercept=raw, colour="red"))
?colMeans
rowMeans(thetas.df[,1:2])
rowMeans(thetas.df[,2])
theta.hat <- colMeans(theta)
theta.hat
238
rgamma
?rgamma
?release
set.seed(1)
theta.hat <- colMeans(thetas)
sample(theta.hat, 1)
?rbinom
?acf
acf(acc)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
acf(acc)
library(shiny)
runGitHub("pitchRx", "cpsievert", subdir="inst/shiny")
?diff
diff(1:10, 2)
diff(1:10, 2, 2)
diff(1:10, 1)
diff(acc, 1)
mean(diff(acc, 1))
mean(diff(deaths, 1))
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b86 <- data.frame(0)
for (i in 1:length(x)) {
b86[,i] <- rpois(100,theta.b*x[i])
}
names(b86) <- as.character(76:85)
m.b86 <- melt(b86)
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d86 <- data.frame(0)
for (i in 1:length(x)) {
d86[,i] <- c(d86, rpois(100,theta.d*x[i]))
}
names(d86) <- as.character(76:85)
m.d86 <- melt(d86)
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b86 <- NULL
for (i in 1:length(x)) {
b86[,i] <- rpois(100,theta.b*x[i])
}
names(b86) <- as.character(76:85)
m.b86 <- melt(b86)
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d86 <- NULL
for (i in 1:length(x)) {
d86[,i] <- c(d86, rpois(100,theta.d*x[i]))
}
names(d86) <- as.character(76:85)
m.d86 <- melt(d86)
?data.frame
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
b86 <- data.frame(b, nrow=100)
names(b86) <- as.character(76:85)
as.character(76:85)
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
b86 <- data.frame(b, ncol=10)
b86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
b86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
m.b86 <- melt(b86)
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d[,i] <- c(d, rpois(100,theta.d*x[i]))
}
d86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
m.d86 <- melt(d86)
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
b86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
m.b86 <- melt(b86)
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d <- c(d, rpois(100,theta.d*x[i]))
}
d86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
m.d86 <- melt(d86)
qplot(diff(a86, 1))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(value, 1), data=m.b86)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(value, 1), data=m.b86)
View(m.b86)
qplot(c(diff(c86, 1), 0))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(c(diff(value, 1), 0), data=m.b86)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(c(diff(value, 1), 0), data=m.b86)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
dim(apply(b86, 1, function(x) diff(x, 1)))
dim(apply(b86, 1, function(x) mean(diff(x, 1))))
length(apply(b86, 1, function(x) mean(diff(x, 1))))
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(c(diff(value, 1), 0), data=m.b86)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
ean(diff(acc,1)
mean(diff(acc,1))
mean(diff(acc,1))
qplot(diff(c86, 1))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(diff(a86, 1))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(c86, 1))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(apply(b86, 1, function(x) mean(diff(x, 1))))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
bf86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
b.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d <- c(d, rpois(100,theta.d*x[i]))
}
df86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
d.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
qplot(b.diff)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(d.diff)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(diff(a86, 1))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(b.diff)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(c86, 1))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(d.diff)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
bf86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
b.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d <- c(d, rpois(100,theta.d*x[i]))
}
df86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
d.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
qplot(diff(a86, 1))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(b.diff)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(c86, 1))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(d.diff)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
bf86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
b.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d <- c(d, rpois(100,theta.d*x[i]))
}
df86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
d.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
qplot(diff(a86, 1))+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(b.diff)+geom_vline(xintercept=mean(diff(acc,1)), colour="red")
qplot(diff(c86, 1))+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
qplot(d.diff)+geom_vline(xintercept=mean(diff(deaths,1)), colour="red")
x <- c(3.863e11, 4.300e11, 5.027e11, 5.481e11, 5.814e11,
6.033e11, 5.877e11, 6.223e11, 7.433e11, 7.106e11)
acc <- c(24,25,31,31,22,21,26,20,16,22)
deaths <- c(734, 516, 754, 877, 814, 362, 764, 809, 223, 1066)
theta.a <- rgamma(1000,238)/10 #posterior
a86 <- rpois(1000,theta.a) #predictive posterior
theta.b <- rgamma(1000,238)/5.716e12
b <- NULL
for (i in 1:length(x)) {
b <- c(b, rpois(100,theta.b*x[i]))
}
bf86 <- data.frame(matrix(b, ncol=10))
names(b86) <- as.character(76:85)
b.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
theta.c <- rgamma(1000,6919)/10
c86 <- rpois(1000,theta.c)
theta.d <- rgamma(1000,6919)/5.716e12
d <- NULL
for (i in 1:length(x)) {
d <- c(d, rpois(100,theta.d*x[i]))
}
df86 <- data.frame(matrix(d, ncol=10))
names(d86) <- as.character(76:85)
d.diff <- apply(b86, 1, function(x) mean(diff(x, 1)))
@
rates <- c(.19, .12, .15, .16, .14, .06, .13, .13, .03, .15)
better_model <- "
model {
for (i in 1:N) {
y[i] ~ dpois(n[i]*theta[i])
theta[i] ~ dgamma(a,b)
}
a ~ dunif(0,a0)
b ~ dunif(0,b0)
}
"
new.dat = list(y = deaths, n = rates*x, N=length(deaths), a0=1000, b0=1000)
new.m = jags.model(textConnection(better_model), new.dat)
new.res = coda.samples(new.m, c("theta", "a","b"), 1e3)
new.check <- data.frame(alpha=as.numeric(new.res[[1]][,"a"]),
beta=as.numeric(new.res[[1]][,"b"]))
new.p <- ggplot(data=new.check) + geom_histogram(aes(y = ..density..)) + geom_density()
new.a <- new.p+aes(a)+ylab("p(alpha|y)")
new.b <- new.p+aes(b)+ylab("p(beta|y)")
grid.arrange(new.a, new.b)
new.a
names(a86) <- "a"
head(a86)
names(a86) <- rep("a", 1000)
head(a86)
melt(a86)
old <- data.frame(a=a86, b=b86, c=c86, d=d86)
b86 <- rpois(1000,theta.b)
d86 <- rpois(1000,theta.d)
old <- data.frame(a=a86, b=b86, c=c86, d=d86)
mold <- melt(old)
head(mold)
new.dat = list(y = deaths, n = rates*x, N=length(deaths), a0=10, b0=1e12)
new.m = jags.model(textConnection(better_model), new.dat)
new.res = coda.samples(new.m, c("theta", "a","b"), 1e3)
new.res[[1]][,"theta"]
new.thetas <- new.res[[1]][,-c(1,2)]
str(new.thetas)
head(thetas.df)
theta.hats <- apply(thetas, 2, mean)
rates <- 1/c(.19, .12, .15, .16, .14, .06, .13, .13, .03, .15)
rates
?rgamma
n <- c(5, 42, 511)
avg <- c(5, 4.4, 4.1)
alpha <- 49
beta <- 14
for (i in n)
g <- c(g, rgamma(1000, alpha+sum(n*avg), beta+i))
g<- NULL
for (i in n)
g <- c(g, rgamma(1000, alpha+sum(n*avg), beta+i))
names(g) <- c(rep("one", 1000), rep("two", 1000), rep("three", 1000))
head(g)
qplot(g)
qplot(g, color=names(g))
qplot(g, fill=names(g))
n <- c(500, 42, 511)
avg <- c(5, 4.4, 4.1)
alpha <- 49
beta <- 14
g<- NULL
for (i in n)
g <- c(g, rgamma(1000, alpha+sum(n*avg), beta+i))
names(g) <- c(rep("one", 1000), rep("two", 1000), rep("three", 1000))
qplot(g, fill=names(g))
n <- c(5, 42, 511)
avg <- c(5, 4.4, 4.1)
alpha <- 49
beta <- 14
g<- NULL
for (i in n)
g <- c(g, rgamma(1000, alpha+sum(n*avg), beta+i))
sum(n*avg)
qplot(theta/n, fill=names(theta))
theta <- NULL
for (i in n)
theta <- c(theta, rgamma(1000, alpha+sum(n*avg), beta+i))
names(theta) <- c(rep("one", 1000), rep("two", 1000), rep("three", 1000))
qplot(theta/n, fill=names(theta))
qplot(theta, fill=names(theta))
theta <- matrix(NA, nrow=1000, ncol=3)
for (i in 1:3)
theta[,i] <- rgamma(1000, alpha+sum(n[i]*avg[i]), beta+n[i])
names(theta) <- c(rep("one", 1000), rep("two", 1000), rep("three", 1000))
plot(theta[,1])
hist(theta[,1])
hist(theta[,2])
hist(theta[,3])
mean(theta[,1])
mean(theta[,2])
mean(theta[,3])
quantile(theta[,1], c(.025, .5, .975))
quantile(theta[,2], c(.025, .5, .975))
quantile(theta[,3], c(.025, .5, .975))
names(theta) <- c("one","two","three")
library(reshape)
ggplot(melt(data.frame(theta)), aes(x=value))+geom_histogram()+facet_wrap(~variable)
ggplot(melt(data.frame(theta)), aes(x=value))+geom_histogram()+facet_wrap(variable~)
ggplot(melt(data.frame(theta)), aes(x=value))+geom_histogram()+facet_wrap(~variable, ncol=1)
n <- c(5, 42, 511)
avg <- c(5, 4.4, 4.1)
alpha <- 49
beta <- 14
theta <- matrix(NA, nrow=1000, ncol=3)
for (i in 1:3)
theta[,i] <- rgamma(1000, alpha+sum(n[i]*avg[i]), beta+n[i])
names(theta) <- c("one","two","three")
library(reshape)
ggplot(melt(data.frame(theta)), aes(x=value))+geom_histogram()+facet_wrap(~variable, ncol=1)
setwd("~/Dropbox/ISU/Teaching/Admin")
class <- read.csv("all_numbers.csv")
class$full <- as.character(class$full)
sampleGroup <- function(data) {
n <- max(data$group_number)
group <- sample(n, size=1, replace=FALSE)
records <- subset(data, group_number==group)
return(list(group_number=group, names=records$full))
}
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
sampleGroup(class)
runGitHub("pitchRx", "cpsievert", subdir="inst/shiny")
setwd("~/Desktop/github/local/pitchRx/inst/shiny")
runApp()
runApp()
traceback()
runApp()
setwd("~/Desktop/github/local/pitchRx/inst/shiny")
library(rgl)
?plot3d
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
demo(stereo)
setwd("~/Desktop/github/local/pitchRx")
install(".")
data(pitches)
rglFX(pitches)
document(".")
install(".")
rglFX(pitches)
str(snaps)
str(snaps[,,1])
plot3d(x=as.vector(snaps[,,1]), y=as.vector(snaps[,,2]), z==as.vector(snaps[,,3]))
str(snaps[,,2])
str(snaps[,,3])
str(as.vector(snaps[,,3]))
plot3d(x=as.vector(snaps[,,1]), y=as.vector(snaps[,,2]), z=as.vector(snaps[,,3]))
Q
install(".")
rglFX(pitches)
rglFX(pitches, interval=.1)
rglFX(pitches, interval=.05)
?saveHTML
saveSWF({
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
knn.ani(test = matrix(rnorm(16), ncol = 2), cl.pch = c(16, 2))
}, swf.name = "kNN.swf", interval = 1.5, nmax = ifelse(interactive(), 40, 2))
?saveHTML
saveHTML({
par(mar = c(4, 4, 0.5, 0.5))
for (i in 1:20) {
plot(runif(20), ylim = c(0, 1))
ani.pause()
}
}, img.name = "unif_plot", imgdir = "unif_dir", htmlfile = "random.html", autobrowse = FALSE,
title = "Demo of 20 uniform random numbers", description = c("This is a silly example.\n\n",
"You can describe it in more detail.", "For example, bla bla..."))
?plot3d
install(".")
install(".")
install(".")
rglFX(pitches)
install(".")
rglFX(pitches)
nplots
n
n
rainbow(1000)
str(rainbow(1000))
?col2rbg
?col2rgb
col2rgb("peachpuff")
col2rgb(1:8)
install(".")
rglFX(pitches)
?brewer.pal
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
