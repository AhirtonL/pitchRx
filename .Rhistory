n
n
n
n
n
test <- getSnapshots(pitches)
n
n
n
n
dim(snapshots[, 1:3, ])
dim(velocties)
apply(snapshots[, 7:9, ], c(1, 2), function(x) { length(x) })
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
Q
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
test <- getSnapshots(pitches)
n
n
n
n
n
dim(locations)
dim(test)
install.packages("abind")
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
test <- getSnapshots(pitches)
n
n
n
n
n
n
n
n
dim(test)
?data.frame
?as.data.frame
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshot[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
n
n
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshots[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
#' Produce time sequenced
#'
#' Pitch trajectories animated on a two-dimensional plot.
#'
#' Details to go here.
#'
#' @param data The nine PITCHf/x parameters used to determine the location of a pitch at a given time.
#' @param interval the amount of time between 'snapshots'
#' @return Return a three dimensinal array. The third dimension corresponds to different 'snapshots' of locations.
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
dim(snapshot)
dim(snapshots)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
Q
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
setwd("~/Dropbox/ISU/Teaching")
library(xlsx)
class.list <- read.xlsx("class_data.xlsx", sheetName = "8_21", header = T)
qplot(Year, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Class Status", ylab = "# of students")
library(ggplot2)
qplot(Year, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Class Status", ylab = "# of students")
qplot(Year, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Class Status", ylab = "# of students", main = "Histogram of Stat 226 Section E (by Class Status)")
qplot(Major, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Class Status", ylab = "# of students", main = "Histogram of Stat 226 Section E (by Class Status)")
p <- ggplot(data = class.list, aes(Year)))
p + coord_polar(theta="y")
p <- ggplot(data = class.list, aes(Year))
p + coord_polar(theta="y")
p <- ggplot(data = class.list, aes(weight = Year))
p + geom_bar(width = 1) + coord_polar(theta="y")
p <- ggplot(data = class.list, aes(x = 1, weight = Year))
p + geom_bar(width = 1) + coord_polar(theta="y")
p <- ggplot(data = class.list, aes(x = factor(1), weight = Year))
p + geom_bar(width = 1) + coord_polar(theta="y")
p <- ggplot(data = class.list, aes(x = factor(1), fill = Year))
p + geom_bar(width = 1) + coord_polar(theta="y")
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year), ylab = "", xlab = "", main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie + geom_bar(width = 1) + coord_polar(theta="y")
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year))
pie + geom_bar(width = 1) + coord_polar(theta="y") + ylab("") + xlab("") + main("Pie Chart of Stat 226 Section E (by Class Status)")
pie + geom_bar(width = 1) + coord_polar(theta="y") + ylab("") + xlab("") #+ main("Pie Chart of Stat 226 Section E (by Class Status)")
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year))
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") #ylab("") + xlab("") #+ main("Pie Chart of Stat 226 Section E (by Class Status)")
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(legend.position = "none")
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year), main = "T")
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year), main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
pie2 <- ggplot(data = class.list, aes(x = factor(1), fill = Major), main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie2 + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
qplot(Major, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Major", ylab = "# of students", main = "Histogram of Stat 226 Section E (by Major)")
pie2 <- ggplot(data = class.list, aes(x = factor(1), fill = Major), main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie2 + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
pie2 + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
qplot(Year, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Class Status", ylab = "# of students", main = "Histogram of Stat 226 Section E (by Class Status)")
pie <- ggplot(data = class.list, aes(x = factor(1), fill = Year), main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
qplot(Major, data = class.list, geom = "histogram", fill=I('steelblue'), col=I('black'),
xlab = "Major", ylab = "# of students", main = "Histogram of Stat 226 Section E (by Major)")
pie2 <- ggplot(data = class.list, aes(x = factor(1), fill = Major), main = "Pie Chart of Stat 226 Section E (by Class Status)")
pie2 + geom_bar(width = 1) + coord_polar(theta="y") + labs(x = "", y = "") + opts(axis.text.x = theme_blank(), axis.text.y = theme_blank())
qplot(Willing, data = class.list, geom = "histogram", binwidth = 50, fill=I('steelblue'), col=I('black'),
xlab = "Price of backpack (in dollars)", ylab = "# of students",
main = "Histogram of Section E's Willingness to Pay for a Backpack (in dollars)")
View(class.list)
library(RMySQL)
drv <- dbDriver("MySQL")
MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
everyone <- dbGetQuery(MLB, "SELECT * FROM 2011_atbats INNER JOIN 2011_pitchFX ON
(2011_atbats.num = 2011_pitchFX.num AND 2011_atbats.url = 2011_pitchFX.url)
RIGHT  JOIN 2011_pitchers ON 2011_pitchers.id = 2011_atbats.pitcher")
everyone <- dbGetQuery(MLB, "SELECT * FROM games INNER JOIN atbats ON games.url = atbats.url
JOIN pitches ON (atbats.num = pitches.num AND atbats.url = pitches.url)
WHERE YEAR(games.date) = 2011")
ames(everyone)
names(everyone)
everyone.R <- subset(everyone, p_throws == "R")
everyone.R <- as.numeric(everyone.R$pitcher = 121250)
head(everyone.R$pitcher)
everyone.R <- as.numeric(everyone.R$pitcher == 121250)
everyone.R <- subset(everyone, p_throws == "R")
everyone.R$Mariano <- as.numeric(everyone.R$pitcher == 121250)
?desired
ls()
rm(everyone)
pitches <- everyone.R[everyone.R$pitch_type %in% c("FF", "FC"), ]
animateFX(pitches, layer = facet_grid(Mariano~stand))
library(devtools)
install_github('pitchRx', 'cpsievert')
library(pitchRx)
animateFX(pitches, layer = facet_grid(Mariano~stand))
?animateFX
data <- scrapePitchFX(start = "2011-01-01", end = "2011-12-31", player = c("Mariano Rivera", "James Shields"), type = "pitcher")
pitchFX <- join(data$pitch, data$atbat, by = c("num", "url"), type = "inner")
shields <- subset(pitchFX, pitcher_name == "James Shields")
summary(shields$pitch_type)
table(shields$pitch_type)
pitches <- pitchFX[pitchFX$pitch_type %in% c("FF", "FC"), ]
animateFX(pitches)
animateFX(pitches, layer = facet_grid(pitcher_name~.))
animateFX(pitches, layer = facet_grid(pitcher_name~stand))
data <- scrapePitchFX(start = "2012-01-01", end = Sys.Date(), player = "J.J. Putz", type = "pitcher")
p <- data$pitch
names(p)
table(p$pitch_type)
ab <- data$atbat
table(ab$pitcher)
data <- scrapePitchFX(start = "2012-01-01", end = Sys.Date(), player = "Phil Hughes", type = "pitcher")
data <- scrapePitchFX(start = "2011-01-01", end = "2011-12-31", player = "Phil Hughes", type = "pitcher")
phil <- join(data$pitch, data$atbat, by = c("num, url"), type = "inner")
phil <- join(data$pitch, data$atbat, by = c("num", "url"), type = "inner")
table(phil$pitch_type)
Mariano <- subset(pitches, pitcher_name == "Mariano Rivera")
phil <- phil[phil$pitch_type %in% c("FF", "FC"), ]
animateFX(rbind(Mariano, phil), layer = facet_grid(pitcher_name~stand))
animateFX(rbind(Mariano, phil), layer = aes(color = type))
setwd("~/Desktop/github/local/pitchRx")
document(".")
install(".") #install the package
animateFX(rbind(Mariano, phil), layer = aes(color = p_throws))
animateFX(rbind(Mariano, phil), layer = aes(color = stand))
animateFX(rbind(Mariano, phil), layer = aes(color = p_throws, alpha = .001))
animateFX(rbind(Mariano, phil))
animateFX(rbind(Mariano, phil), layer = aes(alpha = 0.01))
animateFX(rbind(Mariano, phil), layer = aes(alpha = 1))
url <- "http://gd2.mlb.com/components/game/mlb/notifications.xml"
doc <- xmlParse(url)
node <- getNodeSet(doc,"//alerts")
str(node)
kids <- llply(node, xmlChildren)
str(kids) #list of lists of externalptrs
?multiple
3/2
is.integer(3/2)
"a"  = c("a", b)
"a"  = c("a", "b")
"a"  == c("a", "b")
test <- llply(node, function(x) {
values <- xmlValue(x)
kids <- xmlChildren(x)
return(list(values, kids))
})
head(test)
?grep
grep(c("a", "b"), c("a", "b", "c"))
x <- "a"
length(x) <- 2
x
rep(c("a", "b", "c"), 5)
y <- rep(c("a", "b", "c"), 5)
length(y) <- 5
y
values <- llply(node, xmlValue)
str(test)
str(values)
install(".")
install(".")
install(".")
install(".")
document(".")
?xmlAttr
?xmlAttrs
install(".")
document(".")
document(".")
install(".")
t <- urlsToDataFrame(urls, tables = list(status = NULL), extract = "values", extract.children = "values")
install(".")
t <- urlsToDataFrame(urls, tables = list(status = NULL), extract = "values", extract.children = "values")
n
ls()
str(info)
str(val)
length(val)
